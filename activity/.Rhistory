q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
q()
install.packages("swirl")
library("swirl")
swirl()
?as.Date
?strptime
swirl()
library(swirl)
swirl()
1
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
info()
list.files()
?list.files
list.files(recursive)
list.files(recursive = TRUE)
args(list.files())
args(list.files)
old.dir <- getwd()
args(getwd())
dir.create("testdir")
play()
getwd()
nxt()
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
d
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R"")
""
file.rename("mytest.R","mytest2.R)
""
""
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.info("mytest3.R")
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
?dir
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
?table
?str
?rpois
library(swirl)
swirl()
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
tbl_df()
print (tbl_df)
cran
?select
select(cran, ip_id, package, country)
select(cran, 5:20)
cran, 5:20
cran (5:20)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country == "US")
?comparison
?Comparison
filter(cran, r_version <="3.0.2", country == "India")
filter(cran, r_version <="3.0.2", country == "IN")
filter(cran, r_version <="3.0.2"Â¦ country == "IN")
filter(cran, r_version <="3.0.2"| country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cra, ip_id, package, and size)
cran3 <- select(cran, ip_id, package, and size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, name)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pach_sum, count < 679)
top_counts <- filter(pack_sum, count < 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99
)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, unique)
arrange(top_unique, desc(unique)
)
head(cran)
submit()
submit()
submit()
submit()
submit()
?select
reset()
submit()
submit()
submit()
submit()
submit()
submit()
?filter
?filter
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, grade, sex_class, -count)
res <- gather(students2, grade, sex_class, count)
res <- gather(students2, grade, sex_class, -count)
res <- gather(students2, sex_class, -count)
res <- gather(students2, grade, value, -count)
res <- gather(students2, sex_class, -grade)
res <- gather(students2, sex_class, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into c("sex", "class"))
separate(res, col = sex_class, c("sex", "class"))
submit()
submit()
students3
?gather
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
?unique
submit()
submit()
?unique
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
separate?
?separate
?separate
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1/9/2012")
ymd("1-9-2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()))
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <-  nyc + days(2)
depart
depart <- depart(hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
?lapply
install.packages("sqldf")
getwd()
read.csv("R/Files from coursera/getdata-data-ss06pid.csv")
readcsv <- read.csv("R/Files from coursera/getdata-data-ss06pid.csv")
acs <- read.csv("R/Files from coursera/getdata-data-ss06pid.csv")
sqldf("select * from acs where AGEP < 50")
library (sqldf)
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
head(con)
con
htmlcode = readLines(con)
close(con)
htmlcode
htmlcode[10]
head(htmlcode)
htmlcode[3]
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlcode = readLines(con)
htmlcode
head(con)
head(htmlcode)
dim(htmlcode)
?read.fwf
fixedwf <- read.fwf(htmlcode, header = TRUE)
fixedwf <- read.fwf(htmlcode,widths=c(9,3,3,3,3,3,3,3,3) header = TRUE)
fixedwf <- read.fwf(htmlcode,widths=c(9,3,3,3,3,3,3,3,3), header = TRUE)
fixedwf <- read.fwf(htmlcode, widths=c(9,3,3,3,3,3,3,3,3))
fixedwf <- read.fwf(htmlcode, widths=c(9,3,3,3,3,3,3,3,3), skip = 4)
fixedwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths=c(9,3,3,3,3,3,3,3,3), skip = 4)
fixedwf
head(fixedwf)
fixedwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths=c(12,3,3,3,3,3,3,3,3), skip = 4)
fixedwf
fixedwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths=c(12,7,3,3,3,3,3,3,3), skip = 4)
fixedwf
fixedwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths=c(12,7,4,3,3,3,3,3,3), skip = 4)
head(fixedwf)
fixedwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths=c(12,7,4,9,4,9,4,9,4), skip = 4)
head(fixedwf)
dim(fixedwf)
sum(fixedwf$v4)
summary(fixedwf)
lapply(fixedwf, class)
sapply(fixedwf, class)
sum(fixedwf$V4)
restData<-read.csv("R/Files from coursera/data/restaurants.csv")
head(restData,2)
mtcars
head(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp")
)
library(reshape2)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
head(carmelt)
head(carMelt)
tail(carMelt)
?melt
cylData <- dcast(carMelt, cyl ~ variable)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
?tapply
tapply(InsectSprays$count, InsectSprays$spray, sum)
tapply(InsectSprays$count, sum)
tapply(InsectSprays$count, InsectSprays$spray)
head(InsectSprays)
tail(InsectSprays)
?split
ddply(InsectSprays, .(spray), summarize, sum=sum(count)
)
library(plyr)
ddply(InsectSprays, .(spray), summarize, sum=sum(count))
ddply(InsectSprays, .(spray), summarize, sum=sum(count))
?ddply
getwd()
setwd(C:/Users/Jorge - work/github-repos/RepData_PeerAssessment1/RepData_PeerAssessment1/activity)
setwd("C:/Users/Jorge - work/github-repos/RepData_PeerAssessment1/RepData_PeerAssessment1/activity")
getwd()
data <- read.csv("activity.csv")
data <- read.csv("activity.csv")
library(ggplot2)
steps.total <- tapply(data$steps, data$date, sum, na.rm=TRUE)
qplot(steps.total, binwidth=500, xlab="Total number of steps on each day",ylab="COunt or Frequency")
mean(steps.total, na.rm=TRUE)
median(steps.total, na.rm=TRUE)
library(ggplot2)
summary.by.average <- aggregate(x=list(steps=data$steps), by=list(interval=
data$interval), mean, na.rm=TRUE)
ggplot(summary.by.average, aes(interval, steps)) +
geom_line() +
labs(x="Interval of 5-minutes") +
labs(title="Average number of steps taken")
summary.by.average[which.max(summary.by.average$steps),]
missing <- is.na(data$steps)
table(missing)
# Replace each missing value with the mean value of its 5-minute interval
replaced.value <- function(steps, interval) {
replaced <- NA
if (!is.na(steps))
replaced <- c(steps)
else
replaced <- (summary.by.average[summary.by.average$interval==interval, "steps"])
return(replaced)
}
modified.data <- data
modified.data$steps <- mapply(replaced.value, modified.data$steps, modified.data$interval)
total.steps <- tapply(modified.data$steps, modified.data$date, sum)
qplot(total.steps, binwidth=500, xlab="Total number of steps taken each day")
mean(total.steps)
median(total.steps)
getwd()
activity = read.csv("activity.csv", header=T);
str(activity)
activity = read.csv("activity.csv", header=T);
str(activity)
activity = activity[!is.na(activity[1:nrow(activity),1]),]
daily_steps = data.frame(day = factor(), steps = factor())
for (i in 1:length(unique(activity[,2]))) {
step_count = 0
current_day = unique(activity[,2])[i]
group = which(activity[,2] == current_day)
for (g in group) {
step_count = step_count + activity[g, 1]
}
daily_steps = rbind(daily_steps, data.frame(day=current_day, steps=step_count))
}
library(ggplot2)
g = ggplot(daily_steps, aes(x=day, y = steps)) +
geom_histogram()
print(g)
avg_daily_steps = mean(daily_steps$steps)
avg_daily_steps
median_daily_steps = median(daily_steps$steps)
median_daily_steps
activityDF<-read.csv("activity.csv")
summary(activityDF)
activityDF<-read.csv("activity.csv")
summary(activityDF)
totalstepsperdayDF<-aggregate(activityDF$steps ~ activityDF$date, data = activityDF, sum,na.rm = TRUE)
hist(totalstepsperdayDF[,2],xlab='Total Steps per day',ylab='Number of days',main="Histogram of number of steps each day")
mean_totalstepsperdayDF<-as.numeric(mean(totalstepsperdayDF[,2]))
median_totalstepsperdayDF<-median(totalstepsperdayDF[,2])
install.packages("data.table")
library(data.table)
install.packages("ggplot2")
library(ggplot2)
activityDF <- read.csv("activity.csv" , sep="," , header =TRUE)
newdata <- subset(activityDF, steps != "NA", select=c(steps, date ,interval))
newdataDT <- data.table(newdata)
newdataFinal <- newdataDT[,sum(steps) , by = date]
plotdata <- as.data.frame(newdataFinal)
hist(plotdata$V1 , main= "Activity Monitoring Data",col= "red",  xlab="Steps")
install.packages("ggplot2")
mean(plotdata$V1)
median(plotdata$V1)
